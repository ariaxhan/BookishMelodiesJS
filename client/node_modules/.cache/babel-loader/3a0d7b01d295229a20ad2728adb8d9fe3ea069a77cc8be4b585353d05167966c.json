{"ast":null,"code":"import{useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function SpotifySearch(){const[data,setData]=useState(null);const[accessToken,setAccessToken]=useState(null);useEffect(()=>{const handleAuthRedirect=async()=>{const queryParams=new URLSearchParams(window.location.search);const code=queryParams.get('code');if(code){await exchangeCodeForToken(code);}};handleAuthRedirect();},[]);// Generate a random string for the PKCE challenge\nconst generateRandomString=length=>{const possible='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';const values=window.crypto.getRandomValues(new Uint8Array(length));return Array.from(values,x=>possible[x%possible.length]).join('');};// Function to generate a SHA256 hash\nconst sha256=async plain=>{const encoder=new TextEncoder();const data=encoder.encode(plain);return window.crypto.subtle.digest('SHA-256',data);};// Function to base64 encode the SHA256 hash\nconst base64encode=input=>{return btoa(String.fromCharCode(...new Uint8Array(input))).replace(/=/g,'').replace(/\\+/g,'-').replace(/\\//g,'_');};// Function to initiate the Spotify authorization process\nconst initiateAuthFlow=async()=>{const codeVerifier=generateRandomString(64);localStorage.setItem('code_verifier',codeVerifier);const hashed=await sha256(codeVerifier);const codeChallenge=base64encode(hashed);const clientId='01c9f82ca3e348e2adc1d98eded52db1';// Replace with your client ID\nconst redirectUri='http://localhost:3001/callback';// Replace with your redirect URI\nconst scope='user-read-private user-read-email';// Adjust scopes as needed\nconst authUrl=new URL('https://accounts.spotify.com/authorize');const params={response_type:'code',client_id:'01c9f82ca3e348e2adc1d98eded52db1',scope,redirect_uri:'http://localhost:3001/callback',code_challenge_method:'S256',code_challenge:codeChallenge};authUrl.search=new URLSearchParams(params).toString();window.location.href=authUrl.toString();};// Function to exchange the authorization code for an access token\nconst exchangeCodeForToken=async code=>{const codeVerifier=localStorage.getItem('code_verifier');try{const response=await fetch('/api/token',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({code,codeVerifier})});const data=await response.json();localStorage.setItem('access_token',data.access_token);setAccessToken(data.access_token);// Set the access token in state\nfetchData(data.access_token);// Call fetchData with the new token\n}catch(error){console.error('Error exchanging code for token:',error);}};// Function to fetch data using the access token\nconst fetchData=async token=>{const searchTerm='example';// Replace with your search term\ntry{const response=await fetch(\"/api/spotify-search?q=\".concat(encodeURIComponent(searchTerm),\"&type=track\"),{headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok){throw new Error(\"HTTP error! Status: \".concat(response.status));}const jsonData=await response.json();setData(jsonData);}catch(error){console.error('Error fetching data:',error);setData(null);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:initiateAuthFlow,children:\"Login with Spotify\"}),accessToken&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>fetchData(accessToken),children:\"Fetch Data\"}),data&&/*#__PURE__*/_jsx(\"pre\",{children:JSON.stringify(data,null,2)})]});}export default SpotifySearch;","map":{"version":3,"names":["useEffect","useState","jsx","_jsx","jsxs","_jsxs","SpotifySearch","data","setData","accessToken","setAccessToken","handleAuthRedirect","queryParams","URLSearchParams","window","location","search","code","get","exchangeCodeForToken","generateRandomString","length","possible","values","crypto","getRandomValues","Uint8Array","Array","from","x","join","sha256","plain","encoder","TextEncoder","encode","subtle","digest","base64encode","input","btoa","String","fromCharCode","replace","initiateAuthFlow","codeVerifier","localStorage","setItem","hashed","codeChallenge","clientId","redirectUri","scope","authUrl","URL","params","response_type","client_id","redirect_uri","code_challenge_method","code_challenge","toString","href","getItem","response","fetch","method","headers","body","JSON","stringify","json","access_token","fetchData","error","console","token","searchTerm","concat","encodeURIComponent","ok","Error","status","jsonData","children","onClick"],"sources":["/Users/ariahan/Documents/FinalProject/client/src/components/SpotifySearch.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction SpotifySearch() {\n  const [data, setData] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n\n  useEffect(() => {\n    const handleAuthRedirect = async () => {\n      const queryParams = new URLSearchParams(window.location.search);\n      const code = queryParams.get('code');\n      if (code) {\n        await exchangeCodeForToken(code);\n      }\n    };\n\n    handleAuthRedirect();\n  }, []);\n\n  // Generate a random string for the PKCE challenge\n  const generateRandomString = (length) => {\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const values = window.crypto.getRandomValues(new Uint8Array(length));\n    return Array.from(values, (x) => possible[x % possible.length]).join('');\n  };\n\n  // Function to generate a SHA256 hash\n  const sha256 = async (plain) => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(plain);\n    return window.crypto.subtle.digest('SHA-256', data);\n  };\n\n  // Function to base64 encode the SHA256 hash\n  const base64encode = (input) => {\n    return btoa(String.fromCharCode(...new Uint8Array(input)))\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n  };\n\n  // Function to initiate the Spotify authorization process\n  const initiateAuthFlow = async () => {\n    const codeVerifier = generateRandomString(64);\n    localStorage.setItem('code_verifier', codeVerifier);\n\n    const hashed = await sha256(codeVerifier);\n    const codeChallenge = base64encode(hashed);\n\n    const clientId = '01c9f82ca3e348e2adc1d98eded52db1'; // Replace with your client ID\n    const redirectUri = 'http://localhost:3001/callback'; // Replace with your redirect URI\n    const scope = 'user-read-private user-read-email'; // Adjust scopes as needed\n\n    const authUrl = new URL('https://accounts.spotify.com/authorize');\n    const params = {\n      response_type: 'code',\n      client_id: '01c9f82ca3e348e2adc1d98eded52db1',\n      scope,\n      redirect_uri: 'http://localhost:3001/callback',\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge,\n    };\n\n    authUrl.search = new URLSearchParams(params).toString();\n    window.location.href = authUrl.toString();\n  };\n\n  // Function to exchange the authorization code for an access token\n  const exchangeCodeForToken = async (code) => {\n    const codeVerifier = localStorage.getItem('code_verifier');\n    try {\n      const response = await fetch('/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ code, codeVerifier }),\n      });\n\n      const data = await response.json();\n      localStorage.setItem('access_token', data.access_token);\n      setAccessToken(data.access_token); // Set the access token in state\n      fetchData(data.access_token); // Call fetchData with the new token\n    } catch (error) {\n      console.error('Error exchanging code for token:', error);\n    }\n  };\n\n  // Function to fetch data using the access token\n  const fetchData = async (token) => {\n    const searchTerm = 'example'; // Replace with your search term\n    try {\n      const response = await fetch(`/api/spotify-search?q=${encodeURIComponent(searchTerm)}&type=track`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const jsonData = await response.json();\n      setData(jsonData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setData(null);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={initiateAuthFlow}>Login with Spotify</button>\n      {accessToken && <button onClick={() => fetchData(accessToken)}>Fetch Data</button>}\n      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default SpotifySearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}