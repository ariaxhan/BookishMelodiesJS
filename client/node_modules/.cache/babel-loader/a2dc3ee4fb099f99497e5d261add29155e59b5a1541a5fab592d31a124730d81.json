{"ast":null,"code":"var _jsxFileName = \"/Users/ariahan/Documents/FinalProject/client/src/components/SpotifySearch.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpotifySearch() {\n  _s();\n  const [data, setData] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  useEffect(() => {\n    const handleAuthRedirect = async () => {\n      const queryParams = new URLSearchParams(window.location.search);\n      const code = queryParams.get('code');\n      if (code) {\n        await exchangeCodeForToken(code);\n      }\n    };\n    handleAuthRedirect();\n  });\n\n  // Generate a random string for the PKCE challenge\n  const generateRandomString = length => {\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const values = crypto.getRandomValues(new Uint8Array(length));\n    return values.reduce((acc, x) => acc + possible[x % possible.length], \"\");\n  };\n\n  // Function to generate a SHA256 hash\n  const sha256 = async plain => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(plain);\n    return window.crypto.subtle.digest('SHA-256', data);\n  };\n\n  // Function to base64 encode the SHA256 hash\n  const base64encode = input => {\n    return btoa(String.fromCharCode(...new Uint8Array(input))).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n\n  // Function to initiate the Spotify authorization process\n  const initiateAuthFlow = async () => {\n    const codeVerifier = generateRandomString(64);\n    const hashed = await sha256(codeVerifier);\n    const codeChallenge = base64encode(hashed);\n    const clientId = '01c9f82ca3e348e2adc1d98eded52db1';\n    const redirectUri = 'http://localhost:3001/callback';\n    const scope = 'user-read-private user-read-email';\n    const authUrl = new URL('https://accounts.spotify.com/authorize');\n    localStorage.setItem('code_verifier', codeVerifier);\n    const params = {\n      response_type: 'code',\n      client_id: clientId,\n      scope,\n      redirect_uri: redirectUri,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge\n    };\n    authUrl.search = new URLSearchParams(params).toString();\n    window.location.href = authUrl.toString();\n  };\n  const urlParams = new URLSearchParams(window.location.search);\n  let code = urlParams.get('code');\n\n  // Function to exchange the authorization code for an access token\n  const exchangeCodeForToken = async code => {\n    const codeVerifier = localStorage.getItem('code_verifier');\n    const payload = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        client_id: clientId,\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: redirectUri,\n        code_verifier: codeVerifier\n      })\n    };\n    const body = await fetch(url, payload);\n  };\n\n  // Function to fetch data using the access token\n  const fetchData = async token => {\n    const searchTerm = 'example'; // Replace with your search term\n    try {\n      const response = await fetch(`/api/spotify-search?q=${encodeURIComponent(searchTerm)}&type=track`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const jsonData = await response.json();\n      setData(jsonData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setData(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initiateAuthFlow,\n      children: \"Login with Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), accessToken && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => fetchData(accessToken),\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 23\n    }, this), data && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(SpotifySearch, \"MtpdA8ygRfelpyiBVWZrqwmEEJw=\");\n_c = SpotifySearch;\n;\nexport default SpotifySearch;\nvar _c;\n$RefreshReg$(_c, \"SpotifySearch\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","SpotifySearch","_s","data","setData","accessToken","setAccessToken","handleAuthRedirect","queryParams","URLSearchParams","window","location","search","code","get","exchangeCodeForToken","generateRandomString","length","possible","values","crypto","getRandomValues","Uint8Array","reduce","acc","x","sha256","plain","encoder","TextEncoder","encode","subtle","digest","base64encode","input","btoa","String","fromCharCode","replace","initiateAuthFlow","codeVerifier","hashed","codeChallenge","clientId","redirectUri","scope","authUrl","URL","localStorage","setItem","params","response_type","client_id","redirect_uri","code_challenge_method","code_challenge","toString","href","urlParams","getItem","payload","method","headers","body","grant_type","code_verifier","fetch","url","fetchData","token","searchTerm","response","encodeURIComponent","ok","Error","status","jsonData","json","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/ariahan/Documents/FinalProject/client/src/components/SpotifySearch.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction SpotifySearch() {\n  const [data, setData] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n\n  useEffect(() => {\n    const handleAuthRedirect = async () => {\n      const queryParams = new URLSearchParams(window.location.search);\n      const code = queryParams.get('code');\n      if (code) {\n        await exchangeCodeForToken(code);\n      }\n    };\n\n    handleAuthRedirect();\n  });\n\n  // Generate a random string for the PKCE challenge\n  const generateRandomString = (length) => {\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const values = crypto.getRandomValues(new Uint8Array(length));\n    return values.reduce((acc, x) => acc + possible[x % possible.length], \"\");\n  };\n\n  // Function to generate a SHA256 hash\n  const sha256 = async (plain) => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(plain);\n    return window.crypto.subtle.digest('SHA-256', data);\n  };\n\n  // Function to base64 encode the SHA256 hash\n  const base64encode = (input) => {\n    return btoa(String.fromCharCode(...new Uint8Array(input)))\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n  };\n\n  // Function to initiate the Spotify authorization process\n  const initiateAuthFlow = async () => {\n    const codeVerifier = generateRandomString(64);\n    const hashed = await sha256(codeVerifier);\n    const codeChallenge = base64encode(hashed);\n\n    const clientId = '01c9f82ca3e348e2adc1d98eded52db1';\n    const redirectUri = 'http://localhost:3001/callback';\n    const scope = 'user-read-private user-read-email';\n    const authUrl = new URL('https://accounts.spotify.com/authorize');\n\n    localStorage.setItem('code_verifier', codeVerifier);\n   \n    const params = {\n      response_type: 'code',\n      client_id: clientId,\n      scope,\n      redirect_uri: redirectUri,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge,\n    };\n\n    authUrl.search = new URLSearchParams(params).toString();\n    window.location.href = authUrl.toString();\n  };\n\n  const urlParams = new URLSearchParams(window.location.search);\n  let code = urlParams.get('code');\n\n  // Function to exchange the authorization code for an access token\n  const exchangeCodeForToken = async code => {\n    const codeVerifier = localStorage.getItem('code_verifier');\n    const payload = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: clientId,\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: redirectUri,\n        code_verifier: codeVerifier,\n      }),\n    }\n    const body = await fetch(url, payload);\n\n  };\n\n  // Function to fetch data using the access token\n  const fetchData = async (token) => {\n    const searchTerm = 'example'; // Replace with your search term\n    try {\n      const response = await fetch(`/api/spotify-search?q=${encodeURIComponent(searchTerm)}&type=track`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const jsonData = await response.json();\n      setData(jsonData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setData(null);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={initiateAuthFlow}>Login with Spotify</button>\n      {accessToken && <button onClick={() => fetchData(accessToken)}>Fetch Data</button>}\n      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}\n    </div>\n  )\n};\n\nexport default SpotifySearch;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}