{"ast":null,"code":"// BookSearch.js\nimport{useEffect,useState}from'react';import{Link}from'react-router-dom';import'../css/BookSearch.css';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function BookSearcher(_ref){let{bookTitle}=_ref;// useState hook to maintain the state of the books array\nconst[books,setBooks]=useState([]);// useEffect hook to perform side effects (fetching data in this case)\nuseEffect(()=>{// Only fetch books if a bookTitle is provided\nif(bookTitle){// Function to fetch books from the API\nconst fetchBooks=()=>{// Constructing the API URL, encoding the bookTitle to ensure it's URL-safe\nconst url=\"https://openlibrary.org/search.json?q=\".concat(encodeURIComponent(bookTitle));// Fetching data from the API\nfetch(url).then(response=>response.json())// Parsing the JSON response\n.then(data=>{console.log(data.docs);// Updating the books state with the fetched data\nsetBooks(data.docs);// Assuming 'docs' contains the array of books\n}).catch(error=>console.error('Error fetching books',error));// Handling any fetch errors\n};// Calling the fetchBooks function\nfetchBooks();}},[bookTitle]);// The effect will re-run when the bookTitle prop changes\n// Rendering the fetched book data\nreturn/*#__PURE__*/_jsx(\"div\",{children:books.map((book,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[\" \",Array.isArray(book.author_name)&&book.author_name.map((authorName,authorIndex)=>/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{class:\"title\",children:[\" \",book.title]}),/*#__PURE__*/_jsx(\"li\",{class:\"author\",children:/*#__PURE__*/_jsxs(Link,{to:\"/author/key={authorName}\",children:[\"by \",authorName]})})]}))]},index))});}export default BookSearcher;","map":{"version":3,"names":["useEffect","useState","Link","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","BookSearcher","_ref","bookTitle","books","setBooks","fetchBooks","url","concat","encodeURIComponent","fetch","then","response","json","data","console","log","docs","catch","error","children","map","book","index","Array","isArray","author_name","authorName","authorIndex","class","title","to"],"sources":["/Users/ariahan/Documents/GitHub/BookishMelodiesJS/client/src/components/BookSearch.js"],"sourcesContent":["// BookSearch.js\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/BookSearch.css';\n\nfunction BookSearcher({ bookTitle }) {\n  // useState hook to maintain the state of the books array\n  const [books, setBooks] = useState([]);\n\n  // useEffect hook to perform side effects (fetching data in this case)\n  useEffect(() => {\n    // Only fetch books if a bookTitle is provided\n    if (bookTitle) {\n      // Function to fetch books from the API\n      const fetchBooks = () => {\n        // Constructing the API URL, encoding the bookTitle to ensure it's URL-safe\n        const url = `https://openlibrary.org/search.json?q=${encodeURIComponent(bookTitle)}`;\n        \n        // Fetching data from the API\n        fetch(url)\n          .then(response => response.json()) // Parsing the JSON response\n          .then(data => {\n            console.log(data.docs);\n            // Updating the books state with the fetched data\n            setBooks(data.docs); // Assuming 'docs' contains the array of books\n          })\n          .catch(error => console.error('Error fetching books', error)); // Handling any fetch errors\n      };\n\n      // Calling the fetchBooks function\n      fetchBooks();\n    }\n  }, [bookTitle]); // The effect will re-run when the bookTitle prop changes\n\n  // Rendering the fetched book data\nreturn (\n  <div>\n    {books.map((book, index) => (\n      <div key={index}> {/* Use a div to wrap both title and authors, and use index here */}\n          {/* Check if author_name exists and is an array, then map over it to display each author's name */}\n        {Array.isArray(book.author_name) && book.author_name.map((authorName, authorIndex) => (\n          <><p class=\"title\"> {book.title}</p>\n          <li class=\"author\"><Link to=\"/author/key={authorName}\">by {authorName}</Link></li></>\n        ))}\n      </div>\n    ))}\n  </div>\n);\n\n}\n\nexport default BookSearcher;\n"],"mappings":"AAAA;AACA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,IAAI,KAAQ,kBAAkB,CACvC,MAAO,uBAAuB,CAAC,OAAAC,IAAA,IAAAC,KAAA,gCAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAE/B,QAAS,CAAAC,YAAYA,CAAAC,IAAA,CAAgB,IAAf,CAAEC,SAAU,CAAC,CAAAD,IAAA,CACjC;AACA,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAEtC;AACAD,SAAS,CAAC,IAAM,CACd;AACA,GAAIW,SAAS,CAAE,CACb;AACA,KAAM,CAAAG,UAAU,CAAGA,CAAA,GAAM,CACvB;AACA,KAAM,CAAAC,GAAG,0CAAAC,MAAA,CAA4CC,kBAAkB,CAACN,SAAS,CAAC,CAAE,CAEpF;AACAO,KAAK,CAACH,GAAG,CAAC,CACPI,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAE;AAAA,CAClCF,IAAI,CAACG,IAAI,EAAI,CACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,IAAI,CAAC,CACtB;AACAZ,QAAQ,CAACS,IAAI,CAACG,IAAI,CAAC,CAAE;AACvB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,EAAIJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAAC,CAAE;AACnE,CAAC,CAED;AACAb,UAAU,CAAC,CAAC,CACd,CACF,CAAC,CAAE,CAACH,SAAS,CAAC,CAAC,CAAE;AAEjB;AACF,mBACEL,IAAA,QAAAsB,QAAA,CACGhB,KAAK,CAACiB,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBACrB3B,KAAA,QAAAwB,QAAA,EAAiB,GAAC,CAEfI,KAAK,CAACC,OAAO,CAACH,IAAI,CAACI,WAAW,CAAC,EAAIJ,IAAI,CAACI,WAAW,CAACL,GAAG,CAAC,CAACM,UAAU,CAAEC,WAAW,gBAC/EhC,KAAA,CAAAI,SAAA,EAAAoB,QAAA,eAAExB,KAAA,MAAGiC,KAAK,CAAC,OAAO,CAAAT,QAAA,EAAC,GAAC,CAACE,IAAI,CAACQ,KAAK,EAAI,CAAC,cACpChC,IAAA,OAAI+B,KAAK,CAAC,QAAQ,CAAAT,QAAA,cAACxB,KAAA,CAACF,IAAI,EAACqC,EAAE,CAAC,0BAA0B,CAAAX,QAAA,EAAC,KAAG,CAACO,UAAU,EAAO,CAAC,CAAI,CAAC,EAAE,CACrF,CAAC,GALMJ,KAML,CACN,CAAC,CACC,CAAC,CAGR,CAEA,cAAe,CAAAtB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}