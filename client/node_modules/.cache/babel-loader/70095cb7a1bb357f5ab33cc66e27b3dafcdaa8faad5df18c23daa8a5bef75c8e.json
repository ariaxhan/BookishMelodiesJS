{"ast":null,"code":"import{useContext,useEffect,useState}from'react';import SharedDataContext from'./SharedDataContext';import{jsx as _jsx}from\"react/jsx-runtime\";function SpotifySearch(){const{searchTerm}=useContext(SharedDataContext);const[data,setData]=useState(null);useEffect(()=>{// Function to fetch data\nconst fetchData=async()=>{try{const response=await fetch(\"http://localhost:3001/api/spotify-search?q=\".concat(encodeURIComponent(searchTerm),\"&type=track\"));if(!response.ok){throw new Error(\"HTTP error! Status: \".concat(response.status));}const jsonData=await response.json();setData(jsonData);}catch(error){console.error(\"Error fetching data: \",error);setData(null);// Reset the data state in case of error\n}};if(searchTerm){fetchData();}},[searchTerm]);// Effect runs when searchTerm changes\n// Render your component based on the fetched data\nreturn/*#__PURE__*/_jsx(\"div\",{children:data&&/*#__PURE__*/_jsx(\"pre\",{children:JSON.stringify(data,null,2)})});}export default SpotifySearch;","map":{"version":3,"names":["useContext","useEffect","useState","SharedDataContext","jsx","_jsx","SpotifySearch","searchTerm","data","setData","fetchData","response","fetch","concat","encodeURIComponent","ok","Error","status","jsonData","json","error","console","children","JSON","stringify"],"sources":["/Users/ariahan/Documents/FinalProject/client/src/components/SpotifySearch.js"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport SharedDataContext from './SharedDataContext';\n\nfunction SpotifySearch() {\n  const { searchTerm } = useContext(SharedDataContext);\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    // Function to fetch data\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/spotify-search?q=${encodeURIComponent(searchTerm)}&type=track`);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const jsonData = await response.json();\n        setData(jsonData);\n      } catch (error) {\n        console.error(\"Error fetching data: \", error);\n        setData(null); // Reset the data state in case of error\n      }\n    };\n\n    if (searchTerm) {\n      fetchData();\n    }\n  }, [searchTerm]); // Effect runs when searchTerm changes\n\n  // Render your component based on the fetched data\n  return (\n    <div>\n      {/* Render your data here */}\n      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default SpotifySearch;\n"],"mappings":"AAAA,OAASA,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CACvD,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpD,QAAS,CAAAC,aAAaA,CAAA,CAAG,CACvB,KAAM,CAAEC,UAAW,CAAC,CAAGP,UAAU,CAACG,iBAAiB,CAAC,CACpD,KAAM,CAACK,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAEtCD,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAS,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,+CAAAC,MAAA,CAA+CC,kBAAkB,CAACP,UAAU,CAAC,eAAa,CAAC,CAEvH,GAAI,CAACI,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAH,MAAA,CAAwBF,QAAQ,CAACM,MAAM,CAAE,CAAC,CAC3D,CAEA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACtCV,OAAO,CAACS,QAAQ,CAAC,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7CX,OAAO,CAAC,IAAI,CAAC,CAAE;AACjB,CACF,CAAC,CAED,GAAIF,UAAU,CAAE,CACdG,SAAS,CAAC,CAAC,CACb,CACF,CAAC,CAAE,CAACH,UAAU,CAAC,CAAC,CAAE;AAElB;AACA,mBACEF,IAAA,QAAAiB,QAAA,CAEGd,IAAI,eAAIH,IAAA,QAAAiB,QAAA,CAAMC,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAE,IAAI,CAAE,CAAC,CAAC,CAAM,CAAC,CAChD,CAAC,CAEV,CAEA,cAAe,CAAAF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}